{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Root","n":1},"1":{"v":"# Welcome to Dendron\n\nThis is the root of your dendron vault. If you decide to publish your entire vault, this will be your landing page. You are free to customize any part of this page except the frontmatter on top.\n\n## Lookup\n\nThis section contains useful links to related resources.\n\n- [Getting Started Guide](https://link.dendron.so/6b25)\n- [Discord](https://link.dendron.so/6b23)\n- [Home Page](https://wiki.dendron.so/)\n- [Github](https://link.dendron.so/6b24)\n- [Developer Docs](https://docs.dendron.so/)\n","n":0.132}}},{"i":2,"$":{"0":{"v":"Daily","n":1}}},{"i":3,"$":{"0":{"v":"Journal","n":1}}},{"i":4,"$":{"0":{"v":"2022","n":1}}},{"i":5,"$":{"0":{"v":"06","n":1}}},{"i":6,"$":{"0":{"v":"2022-06-18","n":1},"1":{"v":"\n## Work log\n\n### 1. Component presets global access\n\n**Status**: Active task, Late (T+2 days), Blocked (need assistance from Simon or David for Elad's test setup)\n\n1-1 Add custom Error classes for annotation errors (stackbit: [pull/29](https://github.com/stackbit/stackbit/pull/29))\n\n1-2 [fix: use esm exports in annotation-error](https://github.com/stackbit/stackbit/pull/34/commits/7d2f61b8009f882dfe3410cb6281d9891bfd0e40)\n\n1-3 [feat: minor cleanup to annotation error messages](https://github.com/stackbit/stackbit/pull/34/commits/1d0973f70214a5e4d4e28da1ffe06fcca5ca978e)\n\n### 2. Annotation errors: improve messages, highlight visually\n\n**Status**: Pending since yesterday, On track for total hours, will resume after I've met my commitment to get Elad a testing url ASAP.\n\n2-1 Remove field for slug on singleton models (stackbit-app: [pull/1478](https://github.com/stackbit/stackbit-app/pull/1478))\n\n2-2 Relocate global create button to topbar (stackbit-app: [pull/1463](https://github.com/stackbit/stackbit-app/pull/1463))\n\n### 3. Misc / General admin\n  \n3-1 Upgrade storybook (stackbit-app: [pull/1481](https://github.com/stackbit/stackbit-app/pull/1481))\n\n3-2 Setup annotation errors test site for Elad (drkstr101: [annotation-errors-e2e](https://github.com/drkstr101/annotation-errors-e2e))\n\n> Can transfer repo to `stackbit-themes` org if desired, but I do not intend to maintain it once this task is complete, unless asked to do so.\n\n3-3 Cleared up \"user presets\" functionality w/ Vanesea (turns out this was just the name of already known concept, they do not belong tp authenticated user like I had thought)\n  \n\n","n":0.077}}},{"i":7,"$":{"0":{"v":"2022-06-12","n":1},"1":{"v":"\n## Annotation Updates\n\n**TL;DR** Rather than hard coding error messages at the source, provide additional attributes in the error object so we can delegate all message formatting concerns to the logger service.\n\n1. Refactor existing type `AnnotationError` => `FieldError` (this is an unrelated type)\n\n2. Update global state types:\n\n    ```ts\n    export const ANNOTATION_ERROR = 'AnnotationError';\n    export const OBJECT_ID_NOT_FOUND = 'OBJECT_ID_NOT_FOUND';\n    export const PARENT_FIELD_PATH_NOT_FOUND = 'PARENT_FIELD_PATH_NOT_FOUND';\n    export const PARENT_OBJECT_ID_NOT_FOUND = 'PARENT_OBJECT_ID_NOT_FOUND';\n    export const FIELD_NOT_FOUND = 'FIELD_NOT_FOUND';\n    export const MULTIPLE_CONTAINER_OBJECTS = 'MULTIPLE_CONTAINER_OBJECTS';\n\n    export type AnnotationErrorType =\n        | typeof OBJECT_ID_NOT_FOUND\n        | typeof PARENT_FIELD_PATH_NOT_FOUND\n        | typeof PARENT_OBJECT_ID_NOT_FOUND\n        | typeof FIELD_NOT_FOUND\n        | typeof MULTIPLE_CONTAINER_OBJECTS;\n\n    export interface FieldError {\n        message: string;\n        annotationXPath: string;\n        elementXPath: string;\n        attrValue: string;\n        type: string;\n    }\n\n    export interface AnnotationsTreeFieldPath {\n        oid: string | null;\n        fp: string;\n        loc: string;\n        hasOnlyTextNodes?: boolean;\n    }\n\n    export interface FieldPathError {\n        message: string;\n        fieldPath: string;\n        elementXPath: string;\n        value: AnnotationsTreeFieldPath;\n        type: typeof ANNOTATION_ERROR;\n        kind: AnnotationErrorType;\n    }\n\n    export type AnnotationError = FieldError | FieldPathError;\n\n    export interface State {\n        fetchFieldsError: Error | null;\n        fieldsErrors: FieldError[];\n        clientAnnotationErrors: AnnotationError[];\n        // ...\n    }\n\n    ```\n\n3. Update `logAnnotationErrors` to provide all message formatting logic (previously encoded in `message` attribute)\n\n4. Add a step to group errors by elementXPath prefix, display related errors as a single group.\n\n","n":0.071}}},{"i":8,"$":{"0":{"v":"2022-06-08","n":1},"1":{"v":"\nBaseline: 6\nPhase 1: 5\nPhase 2: 6\n----------\nTotal: 17\n\n- Base: Component Presets Update (III)\n  - Update `+` button to open global components (I)\n  - Create global components modal (III)\n  - Update page creation flow to use components modal (I)\n  - Add help: \"how to find other components (I)\n  - Base: Add preset category functionality (III)\n    - Preset category API CRUD (I)\n    - Show category in new preset view (I)\n    - Preset category model (I)\n    - Reorder preset categories (I)\n    - Relocate presets to category (I)\n","n":0.11}}},{"i":9,"$":{"0":{"v":"2022-06-02","n":1},"1":{"v":"\nstackbit/packages/dev-common/src/runner/editor.js\n\n## 1. TODO move out of common package\n\nL370\n\n```ts\nasync getObjectsWithAnnotations({ annotationTree = null, clientAnnotationErrors = [], locale, reportAllErrors = false }) {\n    const fieldData = this.cms.getLocalizedFieldData(locale);\n    const { objects, pathMap, errors } = resolveObjectsWithAnnotationTree(annotationTree, fieldData, { resolveAllReferences: true });\n    this.populateReferenceLabels(objects, fieldData);\n    //TODO move out of common package\n    if (!reportAllErrors) {\n      const allErrors = [...errors, ...clientAnnotationErrors];\n      const displayErrors = allErrors.slice(0, 5);\n      _.forEach(displayErrors, error => {\n          const errorProps = _.omit(error, ['type', 'message']);\n          this.userLogger.error(\n              `${error.message} ${_.map(errorProps, (val, key) => `${key}:'${val && val.toString ? val.toString() : val}'`).join(', ')}`\n          );\n      });\n      const diffErrors = allErrors.length - displayErrors.length;\n      if (diffErrors > 0) {\n          this.userLogger.error(\n              `${displayErrors.length} Annotation errors shown (out of ${allErrors.length}). Use \\`stackbit dev\\` locally to view all.`\n          );\n      }\n    }\n    return { objects, pathMap, errors };\n}\n```\n\n## 2. ssg-server (POST /_objectsWithAnnotations)\n\n\n```ts\nserver.post('/_objectsWithAnnotations', [bodyParser.json({ limit: '500kb' })], (req, res, next) => {\n      logger.debug('[ssg-server] get objects with annotations');\n      const { annotationTree, clientAnnotationErrors, locale } = req.body;\n      return runner.getObjectsWithAnnotations({ annotationTree, clientAnnotationErrors, locale }).then(result => {\n          logger.debug('[ssg-server] done getting objects with annotations');\n          res.json(result);\n      }).catch(err => {\n          logger.error('[ssg-server] error getting fieldData with annotations from runner', {error: err.message || err});\n          if (_.has(err, 'stack')) {\n              logger.error('[ssg-server] error getting fieldData with annotations from runner, error.stack: ' + err.stack);\n          }\n          res.status(500).send('Error');\n          next(err);\n      });\n  });\n```\n","n":0.071}}},{"i":10,"$":{"0":{"v":"05","n":1}}},{"i":11,"$":{"0":{"v":"2022-05-31","n":1},"1":{"v":"\n1. To run the api server locally you will need a IAM account with AWS. Have Simon create an account for you.\n\n2. Setup npm user\n","n":0.2}}},{"i":12,"$":{"0":{"v":"2022-05-27","n":1},"1":{"v":"\n## Questions\n\n### 1. `hot-content-reload` vs `with-remote-data-updates`\n\nWhat is the difference between `sourcebit-target-next/hot-content-reload` and `sourcebit-target-next/with-remote-data-updates`.\n\nThe former is used in `create-stackbit-app`, while the latter is the form used by the docs. They both appear to do the same thing from a quick glance at the source.\n\nThe only reference to `hot-content-reload` is a brief mention in [the troubleshooting guide](https://docs.stackbit.com/troubleshooting/page-doesnt-refresh/).\n\nIt was not clear from the documentation which is the preferred method. Could we maybe merge these use cases? It seems confusing to me to have one method for git, and another for api (I'm assuming that was the intended difference between them).\n\n\n---\n\n### 2. Annotations usage with frontmatter\n\nWhy does `FlexiblePage` from `create-stackbit-app` not use [nested object notation](https://docs.stackbit.com/reference/annotations/data-sb-field-path/#annotating_nested_objects) for fields defined in frontmatter? And how is it that when I flatten the frontmatter, the page still works without modification (IE. where specifically can I find the code that infers this automatically)? \n\n```tsx\n    // console.log({ page, site });\n    return (\n        <div className=\"page\">\n            <Head>\n                <title>{page.frontmatter.title}</title>\n            </Head>\n            <div {...toObjectId(page.__metadata.id)}>\n                {page.frontmatter.sections && (\n                    <div {...toFieldPath('sections')}>\n                        {page.frontmatter.sections.map((section, index) => (\n                            <DynamicComponent key={index} {...section} {...toFieldPath(`.${index}`)} />\n                        ))}\n                    </div>\n                )}\n            </div>\n            <Footer {...site.footer} />\n        </div>\n    );\n};\n```\n\nAccording to the docs it should be `toFieldPath('frontmatter.sections')`, but this seems to not matter.\n\n#### 2.1 Contentful source breaks local dev\n\nAnd why does switching to the exact same model, but loaded from contentful, not work at all in stackbit local dev:\n\n```\nerror: AnnotationError: Field path starts with accessor (.) but parent field path not found (/html/body[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/a[1])\nerror: AnnotationError: Field path starts with accessor (.) but parent field path not found (/html/body[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/a[1]/h3[1])\nerror: AnnotationError: Field path starts with accessor (.) but parent field path not found (/html/body[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/a[1]/span[1])\nerror: AnnotationError: Field path starts with accessor (.) but parent field path not found (/html/body[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/a[2])\n//...\n```\n\nSee <https://github.com/drkstr101/minimal-contentful-theme/pull/1/files> for a comparison of changes.\n\n---\n\n### 3. `models` vs `contentModels`\n\nWhat is the difference between the `contentModels` (documented) and `models` (undocumented) field in `stackbit.yaml`\n\n```yml\ncontentModels:\n  Page:\n    isPage: true\n    urlPath: \"/{slug}\"\n```\n\nvs\n\n```yml\nmodels:\n    Page:\n        type: page\n        urlPath: '/{slug}'\n```\n\nThe former only works with git, while the later only seems to work with api (EG contentful).\n\n\n### 4. `@stackbit/cms-contentful`\n\nI see this is added as a dependency to our existing contentful theme, but there is no mention in the docs about what this is or why/when it would be needed.\n\n---\n\n### 5. `sourcebit-source-filesystem` improvements\n\nWould it be reasonable at this point to propose a breaking change to `sourcebit-source-filesystem` that flattens frontmatter by default (unless maybe specified in options), and also includes the resolved model name in `__metadata.modelName`? Automatically providing a `__metadata.urlPath` based on standard algo, perhaps configurable in options, would be another big win for code-reuse IMHO.\n\n*This would eliminate the need for magic fields polluting the domain model (IE `layout`, `type`, `slug`, etc.), and greatly improve code reuse across different model sources. Code resuse is pretty much impossible between sources as it stands now, without additional code to massage the data back into what one would expect for their own user-defined domain model.*\n\n---\n\n### 6. Data dedupe in nextjs cache \n\nShould we make an attempt to dedupe the page models from `sourcebit-target-nextjs`, which are currently listed both in the `objects` bucket and again in the `pages`? Or perhaps reference the page data by ID rather than copy all the fields? note: This only applies when `sourcebit-target-nextjs` has correctly defined its pages in the options.\n\n*This is not super important, but I could see it maybe having a small impact on performance for large(ish) sites. Although, it probably doesn't even matter since the only thing sent across the wire is that which is returned by `getStaticProps`...*\n\n---\n\n### 7. Sourcebit deprecation\n\nWhat gives with the ominous message in the docs that sourcebit will soon be deprecated? Would this be for the upcoming `contentlayer`, or is there something like a complete rewrite in the pipeline?\n\nI hope my week long deep-dive into sourcebit was not in vain!\n\n## References\n\n1. [Notes: adding Contentful to existing project (w/local dev)](https://www.notion.so/stackbit/Notes-adding-Contentful-to-existing-project-w-local-dev-WIP-173eab6a77d2403fa396c30f2cb2b8b0#f49ed497d33f491aa4913c8c908f597c) (I found many of these same issues had already been documented, but without any apparent resolution)\n2. [Comparison of changes for contentful source](https://github.com/drkstr101/minimal-contentful-theme/pull/1/files)\n","n":0.039}}},{"i":13,"$":{"0":{"v":"2022-05-26","n":1},"1":{"v":"\n\n## Minimal Examples\n\nThe goal of this experiment was to produce 3 minimal examples using only the online documentation as a guide. These examples highlight the differences between CMS providers by providing a common model and runtime implementation shared across the examples.\n\nTested providers:\n\n- git\n- contentful\n- custom\n\nconclusion: The documentation was easy to follow, seemed complete, and there were hardly any issues writing each implementation to run locally on the first try. However, **in the end, not a single one was editable in Stackbit.**\n\n### Content Model\n\nWe will keep the model as small as possible to reduce the potential source of errors.\n\n```ts\n\n/**\n * Loaded into commonProps as `site`\n */\ninterface SiteConfig {\n  title: string;\n}\n\n/**\n * A simple page model.\n */\ninterface Page\n  title: string;\n  body: string;\n  slug: string;\n}\n```\n\n### Component Implementation\n\nWe should be able to rely on sourcebit to abstract away differences in model sources for greater code reuse in the UI.\n\n**Example**\n\n```tsx\nimport Head from \"next/head\";\nimport { sourcebitDataClient } from \"sourcebit-target-next\";\nimport { toObjectId, toFieldPath } from \"@stackbit/annotations\";\nimport { withRemoteDataUpdates } from \"sourcebit-target-next/with-remote-data-updates\";\nimport styles from \"../styles/Home.module.css\";\n\nexport function DynamicPage({ site, page }) {\n  return (\n    <div className={styles.container}>\n      <Head>\n        <title>{site.title}</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <main className={styles.main} {...toObjectId(page.__metadata.id)}>\n        <h1 className={styles.title} {...toFieldPath(\"title\")}>\n          {page.title}\n        </h1>\n        <p className={styles.description} {...toFieldPath(\"body\")}>\n          {page.body}\n        </p>\n      </main>\n    </div>\n  );\n}\n\nexport async function getStaticProps({ params }) {\n  const pagePath =\n    typeof params?.slug === \"string\"\n      ? params?.slug\n      : \"/\" + (params?.slug || []).join(\"/\");\n  const props = await sourcebitDataClient.getStaticPropsForPageAtPath(pagePath);\n  return { props };\n}\n\nexport async function getStaticPaths() {\n  const paths = await sourcebitDataClient.getStaticPaths();\n  return {\n    paths,\n    fallback: false,\n  };\n}\n\nexport default withRemoteDataUpdates(DynamicPage);\n```\n\nIn theory, there is no reason why this page couldn't be reused for all 3 examples, once the entries are correctly bucketed by `sourcebit-target-nextjs`. One should only need to modify `sourcebit.js` and `stackbit.yaml` to swap out a model source.\n\n### Shared Utility Code\n\nIdeally, we should also be able to rely on a some common  __metadata fields that allows us to reuse common utility code as well.\n\n**Example**\n\n```ts\n{\n    module: require('sourcebit-target-next'),\n    options: {\n        pages: function (objects, utils) {\n            return objects.reduce((pages, page) => {\n                if (page.__metadata.modelName === 'Page') {\n                    return pages.concat({\n                        path: '{slug}',\n                        page\n                    });\n                }\n\n                return pages;\n            }, []);\n        },\n        commonProps: function (objects, utils) {\n            return {\n                site: objects.find((object) => object.__metadata.modelName === 'SiteConfig')\n            };\n        }\n    }\n}\n```\n\nnote: This functionality is not yet part of sourcebit, and may not even be one of its defined goals.\n\n### The examples\n\n#### [stackbit-examples/minimal-filesystem](https://github.com/stackbit-themes/stackbit-examples/tree/minimal-examples/minimal-filesystem)\n\nPlugins: `sourcebit-source-filesystem`, `sourcebit-target-next`\n\n##### Notes\n\n1. By default the `sourcebit-source-filesystem` plugin does not respect a user's domain model, and will apply opinionated transformations to it instead. This makes any code reuse impossible without writing custom plugins to override this behavior:\n  \n2. All fields are placed in a `frontmatter` object, rather then kept at the top level of the entry.\n\n3. The resolved model name is not kept in metadata like other api based plugins\n\n4. An additional user defined method is needed to derive the slug from the file path, which wasn't very clear at first. \n\n##### Validator results\n\n```\n➜  minimal-filesystem git:(minimal-examples) ✗ yarn stackbit validate\nyarn run v1.22.18\n$ stackbit validate\nloading and validating Stackbit configuration from: stackbit-examples/minimal-filesystem\n  loaded 2 models:\n    ✔ Page\n    ✔ SiteConfig\n  ✔ configuration is valid\nloading and validating content from: stackbit-examples/minimal-filesystem\n  loaded 2 files in total (2 matched, 0 unmatched)\n  2 files matched to models:\n    SiteConfig: 1 files:\n      content/data/config.json\n    Page: 1 files:\n      content/pages/index.md\n  ✔ content files are valid\n✔ validation passed\nDone in 1.48s.\n```\n\n\n#### [stackbit-examples/minimal-contentful](https://github.com/stackbit-themes/stackbit-examples/tree/minimal-examples/minimal-contentful)\n\nPlugins: `sourcebit-source-contentful`, `sourcebit-target-next`\n\n\n##### Validation results\n\n```\n➜  minimal-contentful git:(minimal-examples) yarn validate\nyarn run v1.22.18\n$ stackbit validate\nloading and validating Stackbit configuration from: stackbit-examples/minimal-contentful\n  loaded 3 models:\n    ✔ Page\n    ✔ SiteConfig\n  ✔ configuration is valid\nDone in 1.41s.\n```\n\n#### [stackbit-examples/minimal-sourcebit](https://github.com/stackbit-themes/stackbit-examples/tree/minimal-examples/minimal-sourcebit)\n\nPlugins: `sourcebit-source-contentful`, `sourcebit-target-next`, `sourcebit-sample-plugin` (local)\n\n##### Notes\n\n1. An additional field needs to be added to page models to use as a slug.\n2. Contains models merged in from file system and custom plugin\n3. Uses yarn workspaces to define plugin package\n4. It was unclear what to use as the `cmsName` in `stackbit.yaml`.\n\n##### Validator results\n\n```\n➜  minimal-sourcebit git:(minimal-examples) ✗ yarn stackbit validate \nyarn run v1.22.18\n$ stackbit validate\nloading and validating Stackbit configuration from: stackbit-examples/minimal-sourcebit\n  loaded 2 models:\n    ✔ Page\n    ✔ SiteConfig\n  ✔ configuration is valid\nloading and validating content from: stackbit-examples/minimal-sourcebit\n  loaded 1 files in total (1 matched, 0 unmatched)\n  1 files matched to models:\n    SiteConfig: 1 files:\n      content/data/config.json\n  ✔ content files are valid\n✔ validation passed\nDone in 1.42s.\n```\n\n## Inconsistencies w/ documentation\n\nOverall the documentation seemed very complete and consistent with what's in our themes, with only a few minor exceptions.\n\n\n### stackbit.yaml\n\nThere appears to be a difference in how models are defined in git-based and api-based CMS. The documented method did not appear to work for the latter.\n\nDocumented: (does not work with API-based CMS)\n\n```yml\ncontentModels:\n  Page:\n    isPage: true\n    urlPath: \"/{slug}\"\n```\n\nUndocumented: (works in cms)\n\n```yml\nmodels:\n    Page:\n        type: page\n        urlPath: '/{slug}'\n```\n\n### HOC for live preview\n\nThe documentation refers to a different HOC to use when exporting page components than what is used in the starter template and themes. It was unclear which is the correct version to use.\n\n`sourcebit-target-next/with-remote-data-updates`\n\nvs\n\n`sourcebit-target-next/hot-content-reload`\n\nThere was also a small error in the docs which actually had already had a PR to fix it submitted by a community member. I went ahead and merged it. \n","n":0.035}}},{"i":14,"$":{"0":{"v":"2022-05-24","n":1},"1":{"v":"\n## 1. created `stackbit-examples/with-contentful`\n\n```env\nCONTENTFUL_ACCESS_TOKEN = \"CFPAT-kzf9FJ09TlPl9eM64NqJM5a2TwnHJyQFT-FNinHlGEw\" \n\nCONTENTFUL_SPACE_ID = \"630tuj81l5gj\"\n\nCONTENTFUL_PREVIEW_TOKEN = \"kBQDwZ6UBdMROip2x-Qq22S-3Kag48zJRuXY84G1fuQ\"\n\nCONTENTFUL_DELIVERY_TOKEN = \"Gxqq3aUvqTXG9cHfiK5qA8XDmfRt7ejuvvLKmUUPVtw\"\n```\n\n## 2. Discussion w/ Simon\n\n### Aaron R Miller  6:37 AM\n\nSo do I understand correctly then, that the implication of this is that fetching data on a per-page basis with cache eviction is out of the question? It must all be loaded upfront prior to request? (presumably, so all the transform functions will correctly resolve synchronously).\n\n### Simon  6:46 AM\n\nSourcebit always loads upfront all the data and caches it. In dev mode, it watches for changes in data and updates that cache.\nYes, then functions in next.js can decide how to filter and reduce the data per page.\n\n### Aaron R Miller  6:53 AM\n\nI was thinking of putting a prototype together based on serviceworker cache, and I'm wondering if this would be feasible or not given Sourcebit requirements. Does the entire dataset need to be available for sourcebit plugins to be sound, or can it to be lazy-loaded on-demand as well, in theory? Or in other words, can we safely assume each loaded model will have a deterministic/unique uri at runtime?\n\nGoogle DevelopersGoogle Developers\nCaching Files with Service Worker  |  Web  |  Google Developers (16 kB)\n<https://developers.google.com/web/ilt/pwa/caching-files-with-service-worker>\n\nSimon  6:54 AM\nNot sure I understand the full picture\n6:56\nmaybe, lets start from, what are you trying to achieve?\n\nAaron R Miller  7:01 AM\nThis is probably a \"for later\" task, but it's something I've been keeping in the back of my mind (related to the thread-safety problem I've been harping about).\nEssentially it would be \"pull-based\" instead of \"push-based\" like it is now. Request /about from service worker and it returns the cached model if it exists, otherwise, load data -> transform -> cache -> return.\n\nSimon  7:02 AM\nwhere would it happen? on client side, on server side?\n7:03\nhow does the cache knows if the data was updated?\n7:04\nalso, why do you think that right now the data is \"push-based\"?\n\nAaron R Miller  7:05 AM\nclientside I would think. Cache is dumb according to spec.\nAn origin can have multiple, named Cache objects. You are responsible for implementing how your script (e.g. in a ServiceWorker) handles Cache updates. Items in a Cache do not get updated unless explicitly requested; they don't expire unless deleted. Use CacheStorage.open() to open a specific named Cache object and then call any of the Cache methods to maintain the Cache.\nIt is push based in the sense that all the data has to be loaded then \"pushed\" into the cache (for lack of a better term)\n\nSimon  7:06 AM\nactually I think the data is being \"pulled\" rather pushed\n7:08\nFor example, sourcebit listens to content updates in CMS, and once content is updated it \"pulls\" the updated content and updates its internal cache on the server. Which brings to another point is that the cache has to be on the server, not on the client because you are risking that every user will see something different.\nThen sourcebit notifies the client of the updated data and once again, client \"pulls\" the data by re-fetching the props of the current page and triggering getStaticProps. (edited)\n\nAaron R Miller  7:09 AM\nIt is, from a network perspective. I think a more correct distinction would be to say \"ondemand\" vs not. I am referring specifically to how resources are loaded into the cache\n\nSimon  7:10 AM\nSo when you say \"Items in a Cache do not get updated unless explicitly requested\"\nMy question is who requests these changes? Which entity is responsible to watch for updates and notify the cache?\n\nAaron R Miller  7:10 AM\nSourcebit plugin\n\nSimon  7:11 AM\nThis is what is happening today. So what is the difference?\n\nAaron R Miller  7:12 AM\nWhy then does fetch need to run in request? If not to load the data and fill all the cache ahead of time...\n\nSimon  7:13 AM\nthe fetch doesn't run in request\n\nAaron R Miller  7:13 AM\nI mean the redirect block\n\nSimon  7:13 AM\nthe fetch is run only once, one next.js starts\n\nAaron R Miller  7:13 AM\nright, exactly\n\nSimon  7:13 AM\nlook at the code :slightly_smiling_face:\nit doesn't run when the redirect is called\n\nAaron R Miller  7:14 AM\n    redirects: async () => {\n        // wait for sourcebit to generate sourecbit-nextjs-cache file before proceeding to load tailwind config\n        if (!devServerStarted) {\n            devServerStarted = true;\n            await sourcebit.fetch(sourcebitConfig);\n        }\n        return [];\n    },\n\n### Simon  7:14 AM\n\nit is using the blocking nature of next.js configuration in relations to redirect setup code to ensure that sourcebit.fetch finishes before next.js can continue starting the server\n\n### Aaron R Miller  7:14 AM\n\nThis code?\n\n### Simon  7:14 AM\n\nyes\n7:15\nyou see, it is called only once, when next.js starts, it is never called when you request a page\n\nAaron R Miller  7:16 AM\nRight. That would be the difference. Lazy loaded vs loaded all up front.\n\n### Simon  7:17 AM\n\nI see, so you are saying lets load all the data when any page is requested for the first time.\nBut why? If we can preload all the data ahead of time and simplify the process.\n\n### Aaron R Miller  7:26 AM\n\nBecause all that data needs to be sent over the wire in one giant blob of JSON[1]. This way only the data needed for the page would be sent across the wire. What happens in the case of a 10,000 page site? The main benefit I'm after is multiple named caches can be used so I can finally build my themes in parallel. Stackbit stuff is one of the few remaining holdouts I have with \"things I need to disable parallel builds for\". Using the serviceworker cache was my idea to get this functionality for free, but it seems like it's probably going to be more trouble than its worth, from what you're saying\n[1] Unless I am mistaken on how nextjs shares code with getStaticProps\n7:30\nAnd I bet were I to go down this road myself, I would end up on the same conclusion you did\n\n### Simon  7:47 AM\n\nIn the case of 10,000 pages site, without doing what we are doing today you will end up with longer build times and you will end up fetching more data than you actually need to.\nAssume a page has a reference to 10 blog posts. And every blog post has a reference to 3 authors:\npage\npost 1\nco-author 1\nco-author 2\nco-author 3\npost 2\n...\n... post 10\nHere, I showed you the tree of the resolved objects, but in CMS they are stored as separate objects and linked by references with IDs.\nSo, if you don't load all the data beforehand and lazy load it on demand then you are introducing 3 problems:\nLong time waterfall requests:\nWhen you try to build or load the page in the browser, your getStaticProps function would need to first fetch the page object. Then it will need to look into the \"posts\" array, and use their IDs to fetch the actual post, then for every post, you will need to take the IDs of the authors and fetch their data, for example to render their names besides the posts. So now have 3-level deep waterfall with serial requests. And that process happens for every single page. Except these who have their data cached, but it is enough that every page has a post that is not used among other pages, you will have to wait anyway.\nFetching same data multiple times:\nNow assume you are building all 10,000 pages in parallel. This means that while page 1 fetches its 10 posts, another page might show a subset of these posts, so for that page, your getStacicProps method will request the same objects. So you will end up requesting the same object twice instead of preloading it once and storing it in the cache.\nNow, of course you can create really smart cache that also manages the state of current requests and if another page requests an object that was already requested, then you can attach the response handler to the running requests. But that is a huge effort for something that is not needed.\nMissing cache for editors using stackbit\nAdditionally, if you have 10,000 pages site. Then while developing that site, or using it within Stackbit, then every editor who opens a page that wasn't opened before, which will happen a lot if you have 10,000 pages, will have to wait for getStaticProps to fetch the needed data. (edited)\n\n### Simon  7:52 AM\n\nbuild my themes in parallel\nDid you try to run every build within the context of folder with stackbit.yaml?\nI think we already found out that the problem is that when you run your builds it generates cache files in the root folder instead of project folder. (edited)\n\n### Aaron R Miller  8:01 AM\n<https://nextjs.org/docs/basic-features/data-fetching/incremental-static-regeneration>\nThis page describes how one can scale to millions of pages. :slightly_smiling_face:\nBut in all seriousness, I am seeing now how my proposal would sacrifice performance in the common case of smaller sites, for the sake of an edge case, which is def not what we want.\n1> Did you try to run every build within the context of folder with stackbit.yaml?\nYes, but this is not how nx works, and so I wasn't able to get it to work this way. All build commands are run with CWD of the workspace root. This is needed so that the projects can be statically analyzed for dependency order (it takes care of building dependencies in the correct order)\n\nnextjs.org\nData Fetching: Incremental Static Regeneration | Next.js\nLearn how to create or update static pages at runtime with Incremental Static Regeneration. (43 kB)\n<https://nextjs.org/docs/basic-features/data-fetching/incremental-static-regeneration>\n\n### Simon  8:05 AM\n\nMaybe you can prefix the build command with cd?\nbuild: cd project1 && npm run build\n\n### Aaron R Miller  8:06 AM\n\nI also saw there was some functionality related to namespace but it wasn't clear to me if this was something I could use for this\n\n### Simon  8:06 AM\n\nthat sounds wrong that nx doesn't allow you to run the build in the context of a folder\n8:07\nhere, it looks like you can specify cwd for your commands\n<https://nx.dev/packages/nx/executors/run-commands>\nNxNx\nnx:run-commands | Nx\nRun any custom commands with Nx. (43 kB)\n<https://nx.dev/packages/nx/executors/run-commands>\n\n### Aaron R Miller  8:09 AM\n\nnx is running the build, not nextjs. nx is a build system for executing tasks. Yes you can run arbitrary shell commands with a different CWD, but this is not the same as running the @nrwl/next:build generator across multiple projects in parallel\n8:10\n<https://nx.dev/packages/next/executors/build>\n\nNxNx\n@nrwl/next:build | Nx\nBuild a Next.js app. (43 kB)\n<https://nx.dev/packages/next/executors/build>\n\n8:10\nVery few options available\n\n### Simon  8:11 AM\n\nit sounds like it just lacks an important option :slightly_smiling_face:\n\n### Aaron R Miller  8:12 AM\n\naye\n\n### Simon  8:12 AM\n\nor at least it should run next build with cwd of a specific folder\n8:15\nyou can also override the cacheFilePath sourcebit option to set your own paths for the file so it will endup inside the correct dir\n\n### Aaron R Miller  8:15 AM\n\nsourcebit-target-next does not respect this (unless I misunderstood)\n\n### Simon  8:16 AM\n\nwhy not?\n\n### Aaron R Miller  8:16 AM\n\nIt hard-codes its own cache file path based on CWD\n\n### Simon  8:16 AM\n\nnope, it uses cwd if you don't provide the cacheFilePath\n\n### Aaron R Miller  8:16 AM\n\nHmm, my mistake. I will take a second look at that\n\n### Simon  8:18 AM\n\noh, I think I know what you mean\n8:18\nit uses cacheFilePath to save the data, but the data client doesn't respect that\n\n### Aaron R Miller  8:18 AM\n\nFrom what I remembered this was the case in sourcebit, but not sourcebit-target-next. I've learned much since then however, so I should probably run through it one more time\n\n### Simon  8:18 AM\n\nthis is a bug in sourcebit-target-next\n\n### Aaron R Miller  8:19 AM\n\nah yes I was using data client. Byt you're saying there's a way to avoid this?\n\n### Simon  8:19 AM\n\nNow I see what you have tried to do here: <https://github.com/stackbit/sourcebit-target-next/pull/17/files>\n\n### Aaron R Miller  8:19 AM\n\nIndeed!\n8:19\n:smile:\n\n### Simon  8:19 AM\n\nThe problem is that you are sending arbitrary cacheFile\n8:19\nbut it needs to use the option that was passed to sourcebit-target-next\n\n### Aaron R Miller  8:20 AM\n\nyes, excatcly. But my PR does not do this I see\n8:21\nThis can be read from context param, yes?\n\n### Simon  8:21 AM\n\nalso passing cacheFile to getData every time is probably not a good idea...\nbetter if it had known how the sourcebit-target-next was configured\nNew\n8:22\nthe data-client has nothing in common with the sourcebit-target-next\nit runs in different process and instantiated separately\n8:22\nso it is a problem\n\n### Aaron R Miller  8:23 AM\n\nyes, ideally it would be an option passed to sourcebitNext (if I remember the name correctly). The function that sets up a nextjs redirect code in sourcebit.\n8:25\nthere woul need to be some kind of way to dynamically specify some env var when calling the process, but not from the ambient environment the process is running in\n\n### Simon  8:26 AM\n\nMaybe sourcebit-target-next can set env variable that data-client can later read. But I don't know if it will work.\n\n### Aaron R Miller  8:28 AM\n\nI will put it on my list of things to consider while tinkering. My bright ideas tend to come randomly and without warning :wink:\n8:30\nthank you for taking the time to explain this all to me! It was very inlighting\n\n## starter-nextjs-contentful-theme\n\n## Annotation Errors\n\n## MDX Updates\n\n```plantuml\n@startwbs\n* Rich Text Feature WBS\n** stackbit-sdk (3)\n*** Update api scheman (1)\n*** Update validator rules (1)\n** stackbit-app (5)\n*** Slate editor updates (3)\n**** Slate controlbar plugin (3)\n**** Slate inline renderer (1)\n*** Sidebar updates (1)\n*** Component highlighter integration (1)\n*** Other misc updates (1)\n** Release theme updates (1)\n*** stackbit-examples (1)\n*** starter-nextjs-theme (1)\n*** small-business-nextjs-theme (1)\n*** personal-nextjs-theme (1)\n** Release docs (1)\n@endwbs\n```\n","n":0.022}}},{"i":15,"$":{"0":{"v":"Wbs","n":1}}},{"i":16,"$":{"0":{"v":"Component Presets WBS","n":0.577},"1":{"v":"\nGenerate using `wbsm report`. Generates `wbs.project.html`.\n\nFeature Definition Example:\n\n```markdown\n- Unlinked (group work item's not linked to a story) {story=\"null\"}\n- Higher-level user feature/story - [PRJ-001](https://github.com/brainlid/wbs_markdown/issues/1) (Initials) {story=\"001\"}\n```\n\nDeliverable Item Examples:\n\n```markdown\n- [ ] incomplete item with estimated work size of 3 days {link=001 work=3d}\n- [ ] explicitly set confidence value (as percent) {link=001 work=3d confidence=20}\n- [ ] item with a note {link=001 work=3d note=\"shows up in the data table\"}\n- [x] completed work item, 2 hours estimated {link=001 work=2h}\n- [x] completed work item, tracked actual time {link=001 work=2h actual=3.25h}\n```\n\n## Stories\n\nchart {#stories-chart}\n\ntoggle {#stories-toggle}\n\n- **000**: General admin & project management {story=\"000\"}\n- **001**: Icons for elements without presets {story=\"001\"}\n- **002**: Add an ‘educational’ link to explain how to find other components that don’t have a preset {story=\"002\"}\n\n### Group 1 - Global access to all components\n\n- **101**: Users can browse components, presets, and preset categories {story=101 group=\"Group 1\"}\n- **102**: Users can’t delete non-user presets {story=102 group=\"Group 1\"}\n- **103**: If there aren’t saved presets show empty state {story=103 group=\"Group 1\"}\n- **104**: The presets label should show the preset category and link to it {story=104 group=\"Group 1\"}\n- **105**: Relocation of + to add pages {story=\"105\"}\n\ntotals {#stories-total group=\"Group 1\"}\n\n### Group 2 - Contextual access to add a component\n\n- **201**: Only components (and presets if they exist) available in context should be shown {story=201 group=\"Group 2\"}\n- **202**: Required fields, if they exist, are not presented to the user until they have chosen a component and a preset or just a component {story=202 group=\"Group 2\"}\n- **203**: If presets exist, it should not be possible to add a component without choosing a preset first.  {story=203 group=\"Group 2\"}\n- **204**: the add page UI/UX should be changed to use the new modal and flow implemented to add components {story=\"204\"}\n\ntotals {#stories-total group=\"Group 2\"}\n\n### Total\n\ntotals {#stories-total}\n\n## Component presets global access\n\nfilter {#display-filter}\n\nstyle {#display-style}\n\nlevel {#detail-level}\n\n### Code\n\n- Project\n  - Initial Discovery\n    - [x] Presets system implementation notes {work=1d link=000}\n    - Estimate\n      - [x] Product spec deep dive {work=1d link=000}\n      - [ ] Create work breakdown structure {work=1d link=000}\n  - New UI Components\n    - [ ] Component presets side-panel button / actions {work=4h link=\"101\"}\n    - [ ] Component presets layout {work=4h link=\"101\"}\n    - [ ] Component presets list {work=1d link=\"101\"}\n    - [ ] Component presets filter (Search) {work=1d link=\"101\"}\n    - [ ] Component presets gallery (Search) {work=4h link=\"101\"}\n  - API Updates {new=true}\n    - Database Migrations\n  - Misc (uncategorized)\n    - [ ] Add an ‘educational’ link to explain how to find other components that don’t have a preset {work=2h link=\"002\"}\n    - [ ] Create icon map {work=4h link=\"001\"}\n    - [ ] the add page UI/UX should be changed to use the new modal and flow implemented to add components {work=1d link=\"204\"}\n    - [ ] If presets exist, it should not be possible to add a component without choosing a preset first {work=4h link=\"203\"}\n    - [ ] Required fields, if they exist, are not presented to the user until...   {work=4h link=\"202\"}\n    - [ ] Only components (and presets if they exist) available in context should be shown {work=2d link=\"201\"}\n    - [ ] Users can’t delete non-user presets {work=2h link=\"102\"}\n    - [ ] If there aren’t saved presets show empty state {work=2h link=\"103\"}\n    - [ ] The presets label should show the preset category and link to it {work=2h link=\"104\"}\n\n### Administrative\n\n- Administration\n  - MR-1\n    - Submission\n      - [x] **105** pull/1463 {work=2h link=105}\n    - Code reviewed and updated\n      - [ ] **105** pull/1463 updated and merged {work=2h link=105}\n\n## Raw Table Data\n\ntable {#stories-table}\n","n":0.042}}},{"i":17,"$":{"0":{"v":"Stackbit","n":1}}},{"i":18,"$":{"0":{"v":"System Architecture","n":0.707}}},{"i":19,"$":{"0":{"v":"Global Presets Implementation Notes","n":0.5},"1":{"v":"\n## Definitions\n\nItem 1\n: Definition for Item 1\n\nItem 2\n: Definition for Item 2\n: Another definition for Item 2, with a [link](http://www.example.com)\n\n\n\n## Implementation\n\n### Presets Service\n\nSource: [presets-service.ts](https://github.com/stackbit/stackbit/blob/master/packages/dev-common/src/services/presets-service.ts)\n\nTest: [preset-service.test.js](https://github.com/stackbit/stackbit/blob/master/packages/dev-common/__tests__/presets-service.test.js)\n\n#### API\n\n```ts\nexport interface PresetDefinition {\n  label: string;\n  metadata: any;\n  thumbnail: string;\n}\n\nexport interface ReferenceBehavior {\n  behavior?: \"copyReference\" | \"duplicateContents\";\n  nonDuplicatableModels?: string[];\n  duplicatableModels?: string[];\n}\n```\n\nWrite the `PresetDefinition` to a presets directory then return the result:\n\n```ts\ninterface CreatePresetResponse {\n  files: string[];\n  preset: {\n    modelName: any;\n    thumbnail: string | undefined;\n    data: any;\n    label: string;\n    metadata: any;\n  };\n}\n\nexport async function createPreset(\n  dir: string,\n  fieldData: any,\n  fieldDataPath: string[],\n  preset: PresetDefinition,\n  referenceBehavior?: ReferenceBehavior | undefined,\n  logger?: any,\n  dryRun?: boolean\n): Promise<CreatePresetResponse>;\n```\n\nDelete a given preset id and return a list of deleted preset ids:\n\n```ts\nexport async function deletePreset(\n  dir: string,\n  presetId: string,\n  logger?: any\n): Promise<string[]>;\n```\n\n### Preset Loader\n\nSource: [presets-loader.ts](https://github.com/stackbit/stackbit/blob/44ac86a2dedd4399269e11c5cd048522e0fe8fb7/packages/stackbit-sdk/src/config/presets-loader.ts)\n\nHelper function for loading presets from disk\n\n\n```ts\nexport interface PresetsLoaderResult {\n  config: Config;\n  errors: ConfigPresetsError[];\n}\n\nexport async function loadPresets(\n  dirPath: string,\n  config: Config\n): Promise<PresetsLoaderResult>;\n```\n\n### Existing UI Components\n\n- [src/components/studio/AddEntityModal](https://github.com/stackbit/stackbit-app/blob/1a055df1c0ee409e0ed9f4a80414e33aa084badf/src/components/studio/AddEntityModal)\n- [src/components/studio/common/AddEntity](https://github.com/stackbit/stackbit-app/blob/1a055df1c0ee409e0ed9f4a80414e33aa084badf/src/components/studio/common/AddEntity)\n- [src/components/studio/CreatePage](https://github.com/stackbit/stackbit-app/blob/1a055df1c0ee409e0ed9f4a80414e33aa084badf/src/components/studio/CreatePage) (unused)\n- [src/components/studio/SavePreset](https://github.com/stackbit/stackbit-app/blob/1a055df1c0ee409e0ed9f4a80414e33aa084badf/src/components/studio/SavePreset)","n":0.082}}},{"i":20,"$":{"0":{"v":"Annotations System","n":0.707},"1":{"v":"\n\n## Annotations Tree Extractor\n\nSource: `@stackbit-app/src/snippet/processors/HtmlProcessor/annotation-tree-extractor.js`\n\nThe tree extractor is the entry point to the annotations system, and is part of the `HtmlProcessor` module. Once the DOM is ready, pass the global `document` object into `extractAnnotationTree`. The results are then fed into the `resolveObjectsWithAnnotationTree` method \n\n```ts\nexport interface Sourcemaps {\n  [xpath: string]: ElementSourcemap;\n}\n\nexport interface ElementSourcemap {\n  file: string;\n  start?: ElementPosition;\n  end?: ElementPosition;\n}\n\nexport interface ElementPosition {\n  line: number;\n  column: number;\n}\n\nexport interface AnnotationsTree {\n  objectIds: string[];\n  children: AnnotationsTreeNode[];\n}\n\nexport interface AnnotationsTreeNode {\n  oid: string | null;\n  fp: AnnotationsTreeFieldPath[];\n  xpath: string[];\n  children: AnnotationsTreeNode[];\n}\n\nexport interface AnnotationsTreeFieldPath {\n  oid: string | null;\n  fp: string;\n  loc: string;\n  hasOnlyTextNodes: boolean;\n}\n\nexport interface AnnotationError {\n  message: string;\n  elementXPath: string;\n}\n\nexport function extractAnnotationTree(document: Document): {\n  sourcemaps: Sourcemaps;\n  annotationTree: AnnotationsTree;\n  errors: AnnotationError[];\n};\n```\n\n### Example\n\n```js\n{\n  objectIds: ['obj1', 'obj3'],\n  children: [\n    {\n      oid: \"obj1\",\n      fp: [],\n      xpath: [\"/html\", \"node\"],\n      children: [\n        {\n          oid: null,\n          fp: [\n            { oid: null, fp: \"author.title\", loc: \"\", hasOnlyTextNodes: true },\n          ],\n          xpath: [\"/html\", \"node[1]\", \"inner[1]\"],\n        },\n        {\n          oid: null,\n          fp: [{ oid: \"obj3\", fp: \"title\", loc: \"\" }],\n          xpath: [\"/html\", \"node[1]\", \"inner[2]\"],\n        },\n      ],\n    },\n  ],\n}\n```\n\n### findDescendantElements\n\n```ts\nexport type Descendant = { node: Element; xpath: string[] };\n\nfunction findDescendantElements(\n  node: Element,\n  xpath: string[],\n  iteratee: (childNode: Element, xpath: string[]) => boolean,\n  options?: { recursive: boolean }\n): Descendant[];\n```\n\nHelper function that when given a DOM node and an XPath, return a list of DOM descendants nodes along with their absolute XPath.\n\nElements are only added when the given iteratee function returns true.\n\n## Annotation Tree Parser\n\nTest: `packages/dev-common/__tests__/annotation-tree-parser.test.js`\n\n### resolveObjectsWithAnnotationTree\n\n```ts\nfunction resolveObjectsWithAnnotationTree(\n  annotationTree: AnnotationsTree,\n  fieldData: any[],\n  { resolveAllReferences: boolean }?\n): { pathMap: {}; objects; errors: AnnotationError[] };\n```\n\nReceive a list of objectIds, and the annotationTree, and resolves the annotations into a pathMap, and returns any additional referenced objects that were used in the annotations. Also returns validation errors to the client.\n\n\n### parseAnnotationTree\n\n```ts\nfunction parseAnnotationTree(\n  annotationTree,\n  fieldData,\n  { parentOid, parentFp }?\n): { pathMap: {}; pathMapForResolving: {}; errors: any[] };\n```\n\nRecursion that goes over annotationTree, and parses out annotations using the fieldData to resolve and infer objectIds and partial fieldPaths (.field).\nSteps:\n\n1. parse 'data-sb-object-id' annotations and store context in parentOid to append to child annotations if they don't specify objectId explicitly\n2. parse 'data-sb-field-path' annotations (using resolveFp to resolve partials (.field), and parent objectIds), and create a pathMap that maps fieldPaths to xPaths.\n2.1. determine if any of the annotations is a container annotation and store it in context to pass to descendants.\n3. go over child nodes and run the recursion, merging any returned validation errors, and xpath matches.\n\nReturn any resolved annotations as a pathMap,\nalso returns pathMapForResolving, which includes partial fieldPaths for resolving references from any ancestor objectId.\n\n### resolveMatchType\n\n\n```ts\nfunction resolveMatchType(location): string\n```\n\nreceives the xpath location, and resolves the matchType for highlighting (text, element, attribute)\n\n### resolveLocation\n\n\n```ts\nfunction resolveLocation(annotationFp, field): string[];\n```\n\nparses the xpath location partial of an annotation ('objectId:field.path#location') and resolves defaults and fallbacks to return the final xpath.\n\n## Annotation Utils\n\n### fieldPathToFieldDataPath\n\nThis method translates fieldPath (object.sections[0].title) to fieldDataPath (object.fields.sections.items[0].fields.title) It follows references, and returns both the fieldDataPath from the nearest object that has an ID, but also the fieldDataPath from the original passed object\n\nFieldDataPathsFromRoot contains fieldPaths to current fieldPathStr from every object in the reference chain. example: Oid1.fields.sections.items.1.fields.features.items.0.fields.featureTitle Oid2.fields.features.items.0.fields.featureTitle Oid3.fields.featureTitle all three fieldpaths are required to resolve every object in the reference chain\n\n```typescript\nfunction fieldPathToFieldDataPath(\n  objectId,\n  fieldPathStr,\n  fieldData\n): { fieldDataPathsFromRoot: string[]; fieldDataPath: string } | {};\n```\n\n### fieldPathToString\n\nThis converts a fieldPath array to a string, it puts complex strings inside single quotes '', and uses square brackets [] for number keys.\n\n```typescript\nfunction fieldPathToString(fieldPath: string[]): string;\n```\n\n### appendOrArray\n\nAppend item to an array in object given a path, or initialize if it doesn't exist.\n\n```typescript\nfunction appendOrArray(object, path, item): void;\n```\n\n## Annotation Service\n\nSource: `@stackbit/stackbit-dev/packages/stackbit-dev/src/services/annotation-errors.ts`\n\n### logAnnotationErrors\n\n```ts\nexport type AnnotationError = {\n  message: string;\n    elementXPath: string;\n}\n\nexport type SourceMap = {\n  file: string;\n    start?: { line: number }\n}\n\nexport async function logAnnotationErrors(\n  errors: any[],\n  logger: any,\n  baseDir: string,\n  sourcemaps?: { [p: string]: any } | undefined\n): Promise<void>;\n```\n\nSerialize a list of `AnnotationError` objects and send to the provided logger.\n","n":0.04}}}]}
